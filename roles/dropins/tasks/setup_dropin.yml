---

# Ensure that a dropin directory exists for specified file
# and the dropin directory is initially populated with the
# original file at its start.
#
# Cases:
# 1. File does not exist, directory does not exist.
#    Create a skeleton file and then run `update-dotdee` to
#    create the directory with this file as `local`.
# 2. File exists, directory does not exist.
#    Run `update-dotdee` to create the directory with the
#    original file as `local`.
# 3. File does not exist, directory exists.
#    Should not happen.
# 4. File exists, directory exists.
#    Already set up.

- name: 'Set fact w/fully qualified path to: {{ dropins__dropin_file }}'
  ansible.builtin.set_fact:
    dropins__dropin_path: '{{ homedir[user] }}/{{ dropins__dropin_file }}'

- name: Debug dropin file path.
  ansible.builtin.debug:
    var: dropins__dropin_path
    verbosity: 1

- name: 'Stat directory: {{ dropins__dropin_path }}'
  ansible.builtin.stat:
    path: '{{ dropins__dropin_path }}'
  become: true
  register: dropins__file_result

- name: Debug `file_result` variable.
  ansible.builtin.debug:
    var: dropins__file_result
    verbosity: 1

- name: 'Stat directory: {{ dropins__dropin_path }}.d'  # noqa: name[template]
  ansible.builtin.stat:
    path: '{{ dropins__dropin_path }}.d'
  become: true
  register: dropins__dir_result

- name: Debug `dir_result` variable.
  ansible.builtin.debug:
    var: dropins__dir_result
    verbosity: 1

- name: DEBUG
  ansible.builtin.debug:
    msg: 'CREATING {{ dropins__dropin_file }} AT {{ dropins__dropin_path }} FOR USER {{ user }}'
    verbosity: 0

- name: Block
  when: not dropins__dir_result.stat.exists
  become: true
  become_user: '{{ user }}'
  block:
    - name: Ensure a dropin source file exists.
      ansible.builtin.template:
        dest: '{{ dropins__dropin_path }}'
        src: 'dropin_header.j2'
        mode: '0o640'
      register: dropins__copy_result
      when: not dropins__file_result.stat.exists

    - name: Run `update-dotdee` to create dropin directory.
      ansible.builtin.shell: |
        update-dotdee '{{ dropins__dropin_path }}' 2>&1
      args:
        creates: '{{ dropins__dropin_path }}.d'
        executable: /bin/bash
      environment:
        PATH: '{{ homedir[user] }}/.local/bin:{{ ansible_env.PATH }}'
      register: dropins__update_dotdee_result

    - name: Debug `update_dotdee` result.
      ansible.builtin.debug:
        msg: '{{ dropins__update_dotdee_result.stdout }}'
        verbosity: 0

    - name: Hack to ensure original file is first in line.
      ansible.builtin.shell: |
        if [[ -f ${D}/local ]]; then mv ${D}/local ${D}/00-local; fi
      args:
        creates: '{{ dropins__dropin_path }}.d/00-local'
        executable: /bin/bash
      environment:
        D: '{{ dropins__dropin_path }}.d'
      when: dropins__update_dotdee_result.rc == 0

  rescue:
    - name: Debug `copy_result` result.
      ansible.builtin.debug:
        msg: 'IGNORING => {{ dropins__copy_result }}'
        verbosity: 0


# vim: ft=ansible:
