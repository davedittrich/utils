# -*- coding: utf-8 -*-

import os
import unittest
import testinfra

from molecule.shared import (
    ansible_vars,
    get_homedir,
    skip_unless_role,
    testinfra_hosts,
)


class Test_Visible_Bell(unittest.TestCase):

    def setUp(self):
        self.testinfra_hosts = testinfra_hosts
        self.host = host

    def tearDown(self):
        pass

    @skip_unless_role('davedittrich.utils.visible_bell')
    def test_inputrc(self):
        self.assertTrue('visible_bell_users' in ansible_vars)
        for user in ansible_vars['visible_bell_users']:
            f = self.host.file(os.path.join(get_homedir(user), '.inputrc'))
            self.assertTrue(f.exists)
            self.assertTrue(f.content_string.find(r'set prefer-visible-bell') > -1)

    @skip_unless_role('davedittrich.utils.visible_bell')
    def test_bashrc(self):
        self.assertTrue('visible_bell_users' in ansible_vars)
        for user in ansible_vars['visible_bell_users']:
            f = self.host.file(os.path.join(get_homedir(user), '.bashrc'))
            self.assertTrue(f.exists)
            self.assertEqual(f.user, user)
            self.assertTrue(f.group, user)
            self.assertTrue(f.content_string.find(r'set bellstyle visible') > -1)

    @skip_unless_role('davedittrich.utils.visible_bell')
    def test_cshrc(self):
        self.assertTrue('visible_bell_users' in ansible_vars)
        for user in ansible_vars['visible_bell_users']:
            f = self.host.file(os.path.join(get_homedir(user), '.cshrc'))
            self.assertTrue(f.exists)
            self.assertEqual(f.user, user)
            self.assertEqual(f.group, user)
            self.assertTrue(f.content_string.find(r'set visiblebell') > -1)

    @skip_unless_role('davedittrich.utils.visible_bell')
    def test_exrc(self):
        self.assertTrue('visible_bell_users' in ansible_vars)
        for user in ansible_vars['visible_bell_users']:
            f = self.host.file(os.path.join(get_homedir(user), '.exrc'))
            self.assertTrue(f.exists)
            self.assertEqual(f.user, user)
            self.assertEqual(f.group, user)
            self.assertTrue(r'set flash' in f.content_string)

    @skip_unless_role('davedittrich.utils.visible_bell')
    def test_vimrc(self):
        self.assertTrue('visible_bell_users' in ansible_vars)
        for user in ansible_vars['visible_bell_users']:
            f = self.host.file(os.path.join(get_homedir(user), '.vimrc'))
            self.assertTrue(f.exists)
            self.assertEqual(f.user, user)
            self.assertEqual(f.group, user)
            self.assertTrue(r'set vb t_vb=' in f.content_string)


# vim: set fileencoding=utf-8 ts=4 sw=4 tw=0 et :
